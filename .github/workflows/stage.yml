name: "Stage"

on:
  push:
    branches: ["main"]

env:
  IS_CICD: "true"
  DOTNET_VERSION: '8.0.x'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  create_tag:
    name: "Create tag"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    defaults:
      run:
        shell: bash
    outputs:
      build_number: ${{ steps.buildnumber.outputs.build_number }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Generate build number
        id: buildnumber
        uses: onyxmueller/build-tag-number@v1
        with:
          token: ${{secrets.GITHUB_TOKEN}}

      - name: "Create unique tag"
        uses: EndBug/latest-tag@v1.6.1
        with:
          ref: "1.0.${{steps.buildnumber.outputs.build_number}}"

      - name: "Create staging tag"
        uses: EndBug/latest-tag@v1.6.1
        with:
          ref: stage

  build_code:
    name: "Build code"
    needs: [create_tag]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build
        working-directory: server/src
        run: |
          dotnet publish -c Release -o build 
      
      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: server/src/build

  deploy_infrastructure:
    name: "Deploy infrastructure"
    needs: [build_code]
    outputs:
      function_name: ${{ steps.terraform_output.outputs.function_name }}
      resource_group_name: ${{ steps.terraform_output.outputs.resource_group_name }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      # Purely for saving the terraform state
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-2"

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialise terraform state
        working-directory: server/terraform
        run: terraform init

      - name: Apply terraform state
        working-directory: server/terraform
        run: >
          terraform apply
          -auto-approve
          -var="client_id=${{secrets.AZURE_CLIENT_ID}}"
          -var="client_secret=${{secrets.AZURE_CLIENT_SECRET}}"
          -var="tenant_id=${{secrets.AZURE_TENANT_ID}}"
          -var="subscription_id=${{secrets.AZURE_SUBSCRIPTION_ID}}"

      - name: Save output
        working-directory: server/terraform
        id: terraform_output
        run: |
          RESOURCE_GROUP_NAME=$(terraform output -raw azure_resource_group_name)
          FUNCTION_NAME=$(terraform output -raw azure_function_name)
          echo "resource_group_name=$RESOURCE_GROUP_NAME" >> "$GITHUB_OUTPUT"
          echo "function_name=$FUNCTION_NAME" >> "$GITHUB_OUTPUT"

  deploy_code:
    name: "Deploy code"
    needs: [deploy_infrastructure]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: testing1
        env:
          RESOURCE_GROUP_NAME: ${{needs.deploy_infrastructure.outputs.resource_group_name}}
          FUNCTION_NAME: ${{needs.deploy_infrastructure.outputs.function_name}}
        run: echo "$RESOURCE_GROUP_NAME $FUNCTION_NAME"

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: '{"clientId": "${{ secrets.AZURE_CLIENT_ID }}", "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}", "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}", "tenantId": "${{ secrets.AZURE_TENANT_ID }}"}'
          
      - name: Get Publish Profile
        id: publish_profile
        env:
          RESOURCE_GROUP_NAME: ${{needs.deploy_infrastructure.outputs.resource_group_name}}
          FUNCTION_NAME: ${{needs.deploy_infrastructure.outputs.function_name}}
        run: |
          PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles -g $RESOURCE_GROUP_NAME -n $FUNCTION_NAME --xml)
          echo "publish_profile=$PUBLISH_PROFILE" >> "$GITHUB_OUTPUT"

      - name: testing2
        env:
          PUBLISH_PROFILE: ${{steps.publish_profile.outputs.publish_profile}}
        run: echo $PUBLISH_PROFILE

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: build
          path: server/src/build

      - name: 'Deploy to Azure WebApp'
        uses: azure/webapps-deploy@v3
        env:
          FUNCTION_NAME: ${{needs.deploy_infrastructure.outputs.function_name}}
          PUBLISH_PROFILE: ${{steps.publish_profile.outputs.publish_profile}}
        with:
          app-name: $FUNCTION_NAME
          publish-profile: "$PUBLISH_PROFILE"
          package: server/src/build

  # Run tests

  # api_tests:
  #   name: "API tests"
  #   needs: [deploy_infrastructure]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v4

  #     - name: Setup AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: "ap-southeast-2"

  #     - name: Setup python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.9"
  #         cache: "pip"
  #         cache-dependency-path: server/requirements.txt

  #     - name: Install server libraries
  #       run: pip install -r server/requirements.txt

  #     - name: Run server api tests
  #       working-directory: server
  #       run: |
  #         export ENVIRONMENT=stage
  #         pytest tests/api
