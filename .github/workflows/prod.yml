name: Prod

on: workflow_dispatch

concurrency: prod

# TODO: download previous build instead
env:
  DOTNET_VERSION: '8.0.x'

permissions:
  id-token: write  # for OIDC auth
  contents: write

jobs:

  # TODO: download previous build instead
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build
        working-directory: server/src
        run: |
          dotnet publish -c Release -o build 
      
      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: server/src/build

  deploy:
    name: Deploy
    needs: [build]
    environment: prod
    outputs:
      function_name: ${{ steps.terraform_output.outputs.function_name }}
      function_url: ${{ steps.terraform_output.outputs.function_url }}
      resource_group_name: ${{ steps.terraform_output.outputs.resource_group_name }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: build
          path: server/src/build

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Initialise terraform state
        working-directory: server/terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform init -backend-config "key=azure_experiment.prod.terraform.tfstate"

      - name: Apply terraform state
        working-directory: server/terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform apply -auto-approve -var="environment=prod"

      - name: Save output
        working-directory: server/terraform
        id: terraform_output
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          RESOURCE_GROUP_NAME=$(terraform output -raw azure_resource_group_name)
          FUNCTION_NAME=$(terraform output -raw azure_function_name)
          FUNCTION_URL=$(terraform output -raw azure_function_url)
          echo "resource_group_name=$RESOURCE_GROUP_NAME" >> "$GITHUB_OUTPUT"
          echo "function_name=$FUNCTION_NAME" >> "$GITHUB_OUTPUT"
          echo "function_url=$FUNCTION_URL" >> "$GITHUB_OUTPUT"

      - name: Create environment tag
        uses: EndBug/latest-tag@v1.6.1
        with:
          ref: prod
